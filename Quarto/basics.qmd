---
project:
  type: website
  output-dir: docs
title: "基礎"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    toc: true
    toc-title: 目次
    toc_float: true
    toc-depth: 3
    number-sections: true
    theme: simplex
lang: ja
---


## ファイル

Rのコードは
ファイルに書いてください。

`#` で始まる行はコメントです。
行の途中に `#` がある場合は，そこから改行までがコメントとみなされます。
Rはコメントを無視します。
コメントは人間が読んで理解できるようなことを書くのに重宝します。

一連のコードのことをスクリプトと呼びます。

ファイル操作

### 作業ディレクトリの変更

Rを起動しているとき，パソコンのどこにいるのかを確認する必要が生じることがあります。
とくに，ファイルの読み書きをするなど，ファイル操作時に相対的な位置を指定しなければならないことがあります。
例えば，Rで作成した図をPDFファイルとして保存したい場合，パスを指定しなければ，カレントディレクトリに保存される。
このとき，カレントディレクトリがどこなのか理解していなければ，Explorer（Windowsの場合）やFinder（macOSの場合）からファイルを探すのに時間がかかってしまう。
最悪の場合，保存したファイルを見つけることができない。

「どこ」というのは，自分のパソコンのディレクトリ（フォルダとも呼ぶ）構成の「どこ」にいるのかという意味であり，Windowsなら `C:` から始まり，macOSなら `/` から始まる階層構造における位置のことである。
何も設定をしていなければ，Rの起動直後は，ホームディレクトリにいるはずである。
次のコマンドで，自分がどこにいるか（カレントディレクトリの場所）を確認できる。

```{r}
#| eval: false
getwd()
```
作業ディレクトリ（working directory）だからwdであり，それを得るという意味でgetを付けている。
通常，コマンドの意味は知る必要ないが，覚えるためには意味とコマンドの綴りを対応させなければならず，必然的に覚えざるを得ない。

作業ディレクトリを作成し，そこに移動するには次のようにする。
```{r}
#| eval: false
dir.create("./test")
setwd("./test")
```
`./` は自分がいる場所を確実に表現したいときに用いる表現であり，この部分はなくても構いません。
つまり，次のようにしても同じ結果が得られます。
```{r}
#| eval: false
dir.create("test")
setwd("test")
```
ただし，ここで `"test"` というディレクトリを2回作って移動しているので，元いたディレクトリから `"test/test"` に移動しているはずです。
このことを，ExplorerまたはFinderで確かめてください。


元の場所に戻りたければ，次のようにする。
```{r}
#| eval: false
dir.create("./test")
setwd("~")
```

`"~"` はホームディレクトリを意味する記号であり，`"~"` という場所は存在しないことに注意が必要です。
`setwd("~")` の後に，`getwd()` とすることで，ホームディレクトリが実際にはどこのことを指しているのかが分かります。

"~" を自分が作業したいところに変更すればよい。
よくわからないと思うので，最初は先ほどダウンロードしたExcelファイルをホームディレクトリに移動して，そこで作業するのも悪くない。
Excelファイルの移動は，Windowsならエクスプローラーを使い，macOSならファインダーを使えばよい。
この場合，作業ディレクトリは変更する必要がない。


## 変数の型

変数の型には，数値型，因子型，文字列型がある。

```{r}
#| eval: false
typeof()
mode()
class()
```

整数，ファクター，実数，論理値，NULL，NA，文字列
ベクトル，行列，配列，データフレーム，リスト


整数を明示的に扱う場合は，数値の後に `L` を付ける。
```{r}
x <- 10L
x
is.double(x)
is.numeric(x)
is.integer(x)
```
ただし，実践ではこうした表記をしたことはない。



```{r}
table()
unique()

levels()
factor()にのみ使える


data.frame()
list()

head()
tail()

条件分岐
for
```

### 比較演算子

==
!=
>
>=
<
<=

&
&&
|
||
!はその直後の否定を意味する記号です。

論理式での数値は，`0` のみが `FALSE` として扱われ，それ以外は `TRUE` として扱われます。
as.logical(1)
as.logical(0)

is.na()
is.null()

### 正規表現

正規表現を知っているかどうかで，比較演算子の効率的な使い方が飛躍的に向上します。
正規表現は，人間が考えるかのようにコンピュータに考えさせる記述方法です。
しかし，非常にややこしいのでここでは説明しません。
以下のWebページを確認してください。

- [R における正規表現 - RjpWiki](http://www.okadajp.org/RWiki/?R+%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE)


### 型変換

数値型は

```{r}
#| eval: false
install.packages("scales")
```

### 型が変わる

変数の型は意識して変えなくても変わることがある。
どのような場合に変わるかの感覚を身につけなければならない。

`TRUE` を `sum()` することができる。
```{r}
#| eval: false
sum( == )
```
このとき，`sum()` は `TRUE` の数に一致する。
`TRUE` の数を数えていると理解してもよい。
実際には，R内部で `TRUE` は数値の `1` に変換され，`FALSE` は数値の `0` に変換された後，`sum()` が適用されている。


paste("a", "b")
paste("a", "b", sep = "")
paste0("a", "b")
paste("a", "b", callapse = ", ")


## 関数の作成

関数を自分で作ることができます。


## 練習問題

1. 気象庁の次のWebサイトからCSVファイルをダウンロードして，変数 `temp` に読み込んだ後，世界全体の最高気温と最低気温を計算しなさい。
  - [世界の年平均気温偏差（℃）](https://www.data.jma.go.jp/cpdinfo/temp/list/an_wld.html)
1. 
