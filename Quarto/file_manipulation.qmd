---
project:
  type: website
  output-dir: docs
title: "ファイル操作"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    toc: true
    toc-title: 目次
    toc_float: true
    toc-depth: 4
    number-sections: true
    theme: simplex
    mermaid:
      theme: neutral
lang: ja
---

今回は，Rにおけるファイル操作について学びます。
とくにRのコンソールがいまどこにいるかを意識していないと，ファイルの読み書きに支障を来します。
コマンドラインに不慣れな人はこのあたりで躓く可能性があります。


## ファイルの読み込み

[CSV Files](https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html){target="_blank"} から，任意のCSVファイルをダウンロードします。
これをRに読み込んでみましょう。
例えば，`addresses.csv`をダウンロードした場合，次のコマンドで読み込めます。
```{r}
#| eval: false
read.csv("addresses.csv")
```
`read.csv("")` にある2つの `"` の間に，ダウンロードしたファイルの名前を入れます。
拡張子は省略してはいけません。
もし拡張子を非表示にするようにパソコンが設定されている場合は，**必ず**表示する設定に変更してください。

![Windowsの拡張子表示](./Windows_extension.png)

上のコマンドを実行したとき，ファイルが見つからないというエラーが返ってくる場合，対処方法は2つあります。

1. ダウンロードしたファイルを作業ディレクトリ（working directory）に移動する。
1. ダウンロードしたファイルへの絶対パスを指定する。

## ディレクトリ構造とファイル管理の基礎

そもそもの話として，[CUI](https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9){target="_blank"} に慣れていない人は，このファイル操作の内容がさっぱり分からないかもしれません。
現代のOSは，[GUI](https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9){target="_blank"} であるため，無理もない話です。
そこで，ここで簡単に CUI の話をしておきます。

### ディレクトリ構造

まず，Windowsのディレクトリ構造について説明します。
macOSもほぼ同じです。

Rを起動した時，Rコンソールは次の場所（フォルダ）にいます。
```{mermaid}
graph LR
  C[C:] --- Users
  Users --- ユーザ名
  ユーザ名 --- OneDrive
  OneDrive --- doc[ドキュメント]
  style doc fill:#f96,stroke:#333
```
「いる」というのは，Explorer（またはFinder）でその場所を開いていることと同じと思ってください。
Rは，この場所で作業をします。
ここで，`ユーザ名` は今使っているパソコンにログインしているユーザ名のことで，パソコンによって異なります。

この図の線の部分を `/` で置き換えると，CUIで表現できます。
つまり，上の図はCUIでは `C:/Users/ユーザ名/OneDrive/ドキュメント` と表現します（Windowsの場合，`/` を `¥` や `\` で表現する場合もあります）。

一方，Webブラウザを使ってダウンロードしたファイルは，デフォルトでは次の図の `Downloads` にあるはずです。
```{mermaid}
graph LR
  C[C:] --- Users
  Users --- ユーザ名
  ユーザ名 --- OneDrive
  OneDrive --- doc[ドキュメント]
  ユーザ名 --- dow[Downloads]
  style dow fill:#f96,stroke:#333
```
`Downloads` はカタカナで `ダウンロード` という表記になっているかもしれません。

以下の説明では，これらのことが理解できていることを前提としています。

### ファイル管理

続いて，ファイル管理について説明します。
これは，Rとは直接は関係ありません。
パソコンの中のファイルの整理方法の説明です。

人によってファイルの整理方法は異なります。
このため，ここに書いてある通りにすべきということではありません。
ただし，以下の説明はここに書いてあることを想定しています。

自分で作ったWordやExcelのファイルだけでなく，インターネットからダウンロードしたファイルは，`ドキュメント` 以下の関連するフォルダに移動させることを強くおすすめします。
そうしないと，`ダウンロード` フォルダが訳が分からない状態になってしまいます。

`ドキュメント` フォルダも同様で，何もルールを決めずにファイルを保存していると，何が何だか分からなくなってしまいます。
そこで，`ドキュメント` の中にフォルダを作ります。
フォルダの名前は自分で決めてください。
そのフォルダに関連するファイルをフォルダの中に入れていきます。
これらの作業は，Explorer（またはFinder）上で，マウスやトラックパッドを使って行ってください。
そのフォルダの中に，新たなフォルダを作ります。
このフォルダの名前も自分で決めてください。
こうして作成したフォルダは，ツリー状に表現できます。

前節の図の `ドキュメント` 以下のフォルダ構造の例を示すと，以下のようになります。
```{mermaid}
flowchart LR
  ドキュメント --- 大学
  ドキュメント --- 就職活動
  大学 --- 学部
  大学 --- 大学院
  大学院 --- 修士課程1年
  大学院 --- 修士課程2年
  修士課程1年 --- 授業科目A
  修士課程1年 --- 授業科目B
  授業科目A --- lastweek[2023年6月21日]
  授業科目A --- today[2023年6月28日]
  授業科目A --- data
  style lastweek fill:#f96,stroke:#333
  style today fill:#f96,stroke:#333
  style data fill:#f96,stroke:#333
```
`就職活動` を `大学` の中に入れたい人やまったく別のフォルダ構造にしたい人もいるでしょう。
自分の好きなようにしてください。
ただし，以下の説明では，日付のフォルダに，Rスクリプトや授業に関連するファイルを入れ，`data` フォルダにダウンロードしたファイルを入れることを想定した説明をします。

自分なりに分かりやすいフォルダを作って，ファイルを整理してください。


## 作業ディレクトリ

対処方法の1つ目は，Explorer（Windowsの場合）またはFinder（macOSの場合）でのファイル操作を伴います。
ダウンロードしたCSVファイルがどこにあるか分からない場合は，Webブラウザの設定を確認してください。
ダウンロードしたCSVファイルがどこにあるかは分かったとして，そのファイルをどこに移動すればよいでしょうか。
ファイルの移動先は，以下のコマンドの返り値が指す**ディレクトリ**です（ディレクトリはフォルダと同じ意味です。正式にはディレクトリと呼び，GUIを使うときはフォルダと呼ぶことが多いです）。
```{r}
#| eval: false
getwd()
```
ただし，このコマンドの返り値のディレクトリで**本当に**よいかは，その人によります。
といっても分からないと思いますので，作業ディレクトリは次の方法で変更しましょう。

Windowsの場合，メニューの[ファイル]→[ディレクトリの変更…]から作業ディレクトリを変更します。
macOSの場合，メニューの[その他]→[作業ディレクトリの変更…]から作業ディレクトリを変更します。
ここで，先ほどCSVファイルがダウンロードされたディレクトリを指定すればよいです。
しかしながら，ここでは，**作業ディレクトリをどこかに決める**ことをおすすめします。
作業ディレクトリはRを終了すると初期化されます（デフォルト値に戻る）ので，Rを起動するたびに毎回，この操作を行います。
毎回同じ場所でもよいですし，通常は目的（プロジェクト，論文，授業など）ごとに変更すべきでしょう。
どこを作業ディレクトリにするかは自分で決めてください。
Rに関連するファイルしか存在しないディレクトリを作成しておくと，作業がしやすいです。

例えば，`ドキュメント` ディレクトリの中に授業のディレクトリを作成し，その中に授業の回数ごとにディレクトリを作成する方法が考えられます。
そこでは，Rのプログラムに関するファイルを作成しておくとよいでしょう。
Rのプログラムが書かれたもの（関数やコマンドのかたまり）を，コードと言ったり，スクリプトと言ったりします。
これらスクリプトが書かれたファイルは，拡張子を `R` として，文字コードがUTF-8のテキストファイルとして保存します。
拡張子が `R` のファイルは，ダブルクリックして開いても構いませんが，テキストエディタで開くことをおすすめします。
テキストエディタは，Windowsの場合は [秀丸エディタ](https://hide.maruo.co.jp/software/hidemaru.html){target="_blank"} が有名で，おすすめです。
秀丸エディタは有料ですが，学生は支払いが免除されるはずでし，支払わなくても警告が出たときにその警告を閉じれば作業できます（メモ帳は改行コードのバグがあるためおすすめしません）。
macOSの場合はOS標準のテキストエディット.appで問題ありません。
最近は，OSに関係なく，[Visual Studio Code](https://code.visualstudio.com/){target="_blank"} を使うのもよいかもしれません。
Rのスクリプトに書かれたコードを必要な部分だけコピーして，Rコンソールにペーストしてから，実行してください。
[Visual Studio Code](https://code.visualstudio.com/){target="_blank"} には，お節介機能が多いため，Rを直接実行できますが，Rに慣れないうちはRコンソールから実行するようにしてください。

上記のようなマウス操作をしない方法もあり，操作をRコンソール内で完結させることができます。
次のコマンドを知っておくと便利です。
```{r}
#| eval: false
setwd("C:/Users/ユーザ名/OneDrive/ドキュメント")
```
このコマンドの `""` の中には，自分のパソコンのディレクトリ構造の場所を指定します。
この場所は，Windowsなら `C:` から始まり，macOSなら `/` から始まる階層構造における位置のことで，パスと呼びます。
このパスはファイル名ではなく，ディレクトリ名で終わることに注意してください。
ここで行っているのは，作業ディレクトリの変更です。


## 絶対パス

エラーへの対処方法の2つ目は，Rコンソールの場所は移動せずに，コマンド実行時に絶対パスを指定する方法です。
これは，次のコマンドによって実現します。
```{r}
#| label: comment
#| eval: false
read.csv("C:/Users/ユーザ名/Downloads/addresses.csv") # Windowsの例
# read.csv("/Users/ユーザ名/Downloads/addresses.csv") # macOSの例
```
Windowsの場合（おそらくWindows 11以降），ダウンロードしたファイルを右クリックして，「パスのコピー」をクリックすると，クリップボードにそのファイルの絶対パスがコピーされます。
コピーした後，`read.csv("")` にある2つの `"` の間にペーストしてください。
macOSの場合，Terminal.appを起動して，そのウィンドウにダウンロードしたファイルをドラッグ＆ドロップすれば，絶対パスが表示されます。
絶対パス正しければ，上のコマンドでCSVファイルの中身が表示されるはずです。

実際には，Rを起動した直後に作業ディレクトリを一度変更し，その後は相対パスを変更しながら，ファイルの読み書きをすることになるはずです。
なお，こうした煩雑さを緩和する目的で，[here](https://CRAN.R-project.org/package=here){target="_blank"} パッケージがありますので，知りたい人は調べてください。


## 相対パス

相対パスは現在の作業ディレクトリを起点として，相対的にどこのファイルを読み書きするかを指定する考え方です。
Rによるディレクトリの作成と合わせて考えると非常に便利です。

例えば，作業ディレクトリの下に新たなディレクトリを作成し，そこにファイルをダウンロードした後に，そのファイルを読むには次のようにします。
```{r}
#| eval: false
dir.create("./test")
download.file("https://people.sc.fsu.edu/~jburkardt/data/csv/addresses.csv", "./test/addresses.csv")
read.csv("./test/addresses.csv")
```
```{r}
#| echo: false
#| warning: false
download.file("https://people.sc.fsu.edu/~jburkardt/data/csv/addresses.csv", "../data/addresses.csv")
read.csv("../data/addresses.csv")
```
パスの先頭にある `.` は自分がいるディレクトリを強調して表現したいときに用いる記号です。
このことから，`./` は作業ディレクトリを意味します。
この部分はなくても構いません。
ただし，`"./test"` と `"test"` は同じ意味ですが，`"/test"` は意味が異なりますので注意してください。
もし `dir.create("/test")` とした場合，作業ディレクトリではなく，ルートディレクトリに新たなディレクトリが作成されます（こうした操作はOSにとって脅威となりますので，絶対にやらないでください）。

上述のコードは，`dir.create()` でディレクトリを作成し，`download.file()` でファイルをダウンロードした後，`read.csv()` でダウンロードしたファイルを読み込みます。

この結果を見て，1行目の左側に数字がついておらず，2行目が1，6行目が6となっています。
これは，Rが1行目をヘッダーとして読み込んでいるという意味です。
これで正しい場合もありますが，この例は1行目もレコードなので，次のようにしなければなりません。
```{r}
read.csv("../data/addresses.csv", header = FALSE)
```
ヘッダーをどうすべきかはファイルによって異なります。
例えば，次の例では，ヘッダーを `TRUE` にすべきです（省略時のヘッダーは `TRUE` であるため，省略してもよい）。 
```{r}
download.file("https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv", "../data/airtravel.csv")
read.csv("../data/airtravel.csv", header = TRUE)
```
ヘッダーがおかしいものがありますが，ここでは無視します（この節の最後のやり方でこのおかしさは解消します）。
あえて間違った読み方をすると次のようになります。
```{r}
read.csv("../data/airtravel.csv", header = FALSE)
```

正しく読み込めたかどうかは，Rの表示と元のCSVファイル（テキストエディタやMicrosoft Excelを使って表示）を比較して確かめてください。
以上の例のように，一度ダウンロードしたファイルは自分のパソコンに残っているため，`read.csv()` を使って何度も読み直すときに `download.file()` は必要ありません。
これは，Explorer（Windowsの場合）やFinder（macOSの場合）における通常のファイル操作と同じです。

なお，パスの先頭に `..` または `../` を書くこともできます。
これらの記号は，作業ディレクトリのひとつ上の階層のディレクトリを意味します。
`.` と `..` は同時には使えません。
どちらもパスの先頭になければならないからです。
次のコードは，Rの作業ディレクトリの1つ上の階層に，dataという名前のディレクトリを作成するもので，ファイルの出力先を指定する際に頻繁に使います。
```{r}
#| eval: false
outdir <- "../data"
if (!file.exists(outdir)) {
  dir.create(outdir)
}
```
2行目と4行目は，すでにそのディレクトリがある場合は，何もしないことを意味しています。
このコマンドを理解するには，次回説明する条件分岐と `!` の意味を正しく理解できなければなりません。
ここで，outdirという名前の変数を作っているのは，それ以降に同じ記述が2回登場するためです。
後になって，もしディレクトリを変更したくなった場合，2箇所修正するよりも1箇所修正する方が間違いが少なくてすみます。
なお，この考え方に基づくと，CSVファイルを読むコマンドは以下のように書き換えることができます。
```{r}
outdir <- "../data"
if (!file.exists(outdir)) {
  dir.create(outdir)
}
destfile <- "../data/biostats.csv"
if (!file.exists(destfile)) {
  utils::download.file("https://people.sc.fsu.edu/~jburkardt/data/csv/biostats.csv", destfile)
}
read.csv(destfile)
```
コードは複雑になりましたが，読み込みたいファイルがすでにダウンロードされている場合は，再びダウンロードしないため，こちらの方がネットワークへの負荷が少なく，よりよいコードと言えます。
ただし，元のファイルと比較するとヘッダーがおかしいです。
CSVファイルのヘッダーを変更せずにそのまま読むには，次のようにします。
```{r}
read.csv(destfile, check.names = FALSE)
```


## 練習問題

1. Rを起動した状態で，Webブラウザを使って [CSV Files](https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html){target="_blank"} から，任意のCSVファイルをダウンロードしてください。
ExplorerやFinderを使ってファイルを移動せずに，また，`setwd()` を使わずに，Rコンソール上でダウンロードしたファイルを読み込みなさい。
