---
project:
  type: website
  output-dir: docs
title: "まずは使ってみる"
date: "`r format(Sys.time(), '%Y-%m-%d')`"
format:
  html:
    toc: true
    toc-title: 目次
    toc_float: true
    toc-depth: 4
    number-sections: true
    theme: simplex
lang: ja
---

このサイトに書かれていることを実行するためには，あなたのパソコンでRを使える環境を構築しなければなりません（ここでは，RというアプリケーションとR言語を区別することなく，Rと呼びます。区別する場合，前者を `R.app` と書くことがありますが，これはmacOSのファイル名に由来する慣習です）。
スマートフォンには対応していないため，必ずパソコンを使ってください。


## 環境構築

Rは [The Comprehensive R Archive Network](https://cran.r-project.org/){target="_blank"} から自分のパソコンのOSに対応したものをダウンロードし，インストールしてください。

[The Comprehensive R Archive Network](https://cran.r-project.org/){target="_blank"} は，Googleなどで「**CRAN**」（読みは「シーラン」または「クラン」）と入力して検索すると，すぐに見つかるはずです。
あなたのパソコンのOSがWindowsなら「Download R for Windows」をクリックし，macOSなら「Download R for macOS」をクリックしてください。
Windowsの場合，次の画面で「base」をクリックするとインストーラをダウンロードするページが表示されるはずです。
macOSの場合，自分のMacのCPUがApple siliconかIntelかで，ダウンロードするファイルが異なります。
自分の環境（OSとCPU）に合ったファイルがダウンロードできたら，そのファイルを使ってRをインストールしてください。
Rの準備はこれだけです。

もしRStudioを使いたければ，インストールしても構いません。
RStudioが何をするためのものかを知ってからインストールしても遅くありませんので，Rに慣れてからインストールすることをおすすめします。
Rコマンダー等，他のソフトウェアはインストールする必要はありません。
Rで何ができるか検索した先に，Rに関連するソフトウェア（パッケージではなく）をインストールするよう指示があった場合は，それが何であるのか理解し，本当に必要であることが分かってから，指示に従ってください。

奥村先生による [統計・データ解析](https://okumuralab.org/~okumura/stat/){target="_blank"} は大変参考になります。
時間をかけてじっくり読んむとともに，自分のパソコンで同じようにできるか確かめてください。


## 基本操作

Rを起動すると，**Rコンソール**が現れます。
macOSの場合はRコンソールのみが表示され，Windowsの場合は全体のウィンドウの中の小さなウィンドウがRコンソールです。

Rコンソールは下から上に流れていき，一番下がコマンドを入力する場所です。
その場所に，`>` という文字が表示されているはずです。
`>` のことを**プロンプト**と呼びますが，この名前は覚えなくても問題ありません。
ここにコマンドを入力するということだけは覚えてください。

ここで言う**コマンド**とは，Rへの命令のことであり，その実態は**関数**であることが多く，一連のコマンドは**コード**や**スクリプト**として表現されます。
これらの言葉の厳密な使い分けはできなくても問題ありません。

終了するときは，通常のアプリケーションと同じように終了してください。
ただし，Windowsでは「作業スペースを保存しますか？」，macOSでは「ワークスペースのイメージファイルを保存しますか？」と聞かれます。
「いいえ」または「保存しない」を選択してください。

### 四則演算

さっそく，計算してみましょう。
プロンプトに続けて，次のように入力してください。
```{r}
#| eval: false
1 + 1
```
ここで改行については何も書いていないですが，この文字列を入力した後は，`Enterキー` または `Returnキー` を押してください。
この操作のことを「実行する」と言います。

`1 + 1` を実行すると，次のように表示されるはずです。
```{r}
#| echo: false
1 + 1
```
先ほどのコマンドの返り値が，`2` であることが分かります。
それでは，`[1]` は何でしょうか。
これは右に表示されている返り値が，ベクトルの何番目の要素であるかを示したものです（厳密には正しくないが，この理解で問題ない）。
`2` はスカラーであり，ベクトルで考えると1番目の要素に当たるため，1番目の `1` が `[]` の中に表示されます。

四則演算は簡単にできます。
思いつくまま，いくつか実行してみてください。
```{r}
#| eval: false
1 + 3
1 - 2
2 * 3
4 / 2
```
これらの返り値が期待通りかを確かめてください。
この例にあるように，かけ算は `*` で，割り算は `/` で表します。

これまでのように，四則演算の記号の前後にはスペースを入力してください。
例えば，次のようにスペースを入れなくても，正しい返り値が得られます。
```{r}
#| eval: false
2+5
10--2
6*1.5
6/4
```
ただし，人間にとっては見にくくなっているはずです。
プログラミングにおいて人間にとって読みやすいかどうかは重要です。
ちなみに，上記の例の2つ目は，正しくは `10 - -2` と書くか，`10 - (-2)` と書いてください。
マイナス符号の後にスペースを入れると見にくくなるため，入れないのが一般的です（スペースを入れても入れなくても，結果は変わりません）。
読みやすさを優先して，適宜スペースを入れるようにしてください（このページの記述方法は標準的なものです。記述方法をチェックするために，[lintr](https://github.com/r-lib/lintr){target="_blank"} パッケージがあります。ここでは理解する必要はありません）。
どうすれば読みやすくなるかは説明が難しく，たくさんのRコードを読むことで自然に身についていくものです。

計算の順番を指定する場合は，`()` で括ってください。
```{r}
#| eval: false
((2 * 3) + 3) / (2 * 1.5)
```
`()` は何回入れ子になっても構いません。
`{}` や `[]` は絶対に使ってはいけません。

ここで，読者のみなさんにお伺いします。
ここまでで，このページに書かれていなかった計算を試してみたでしょうか。
例えば，次の計算結果はどう表示されるのだろうか，と疑問を持ち，確認したでしょうか。
```{r}
#| eval: false
0.2 * 5
1 / 3
10 / 0
0 / 10
```
プログラミングの学習に重要なのは**好奇心**です。
書かれていることをコピー&ペーストするだけでは，プログラミングスキルを修得するのはおそらく不可能でしょう。
自分で考えながら，書かれていること以上のことを学習していってください。
いろいろ計算してみたという方は，その調子で学習を進めていってください。
ある瞬間に突然理解が深まるはずです。


### 変数

Rに値を記憶させるために，**変数**（より厳密には，**オブジェクト**）に値を代入すると便利です。
例えば，変数 `x` に10を代入するには次のコマンドを実行します。
```{r}
#| eval: false
x <- 10
```
これは次のように書くこともできます。
```{r}
#| eval: false
x = 10
```
これらは同じ処理をしています。
ただし，R的な（R like）やり方は前者です。

変数 `x` に値が入ったことは，次のようにして確認できます。
```{r}
#| eval: false
x
```
あるいは，次のコマンドでも同じ結果が得られます。
```{r}
#| eval: false
print(x)
```

代入するものは値そのものでなくても，何らかの返り値を持つ数式でも構いません。
また，代入する変数の名前は `x` である必要はありません。
自分で自由に決められます。
```{r}
#| eval: false
hensuu <- 2 * 3
```
変数の中身を確認したければ，次のようにします。
```{r}
#| eval: false
hensuu
```
また，変数を使って計算することもできます。
```{r}
#| eval: false
hensuu2 <- hensuu * 2
```
このことから，コマンドを実行したときの返り値をコンソールに表示させるか，変数に代入するかを選択していることが分かります。
変数に代入しておくと，いつでもその変数の中身を確認できるため，この代入の操作は頻繁に行います。

また，上に見たとおり，変数名は何でも構いません。
日本語でも可能です。
```{r}
#| eval: false
変数 <- 2 * 10
```
ただし，日本語の変数名は思わぬトラブルを招く原因になり得ますので，特別な理由がない限り，使わないことをおすすめします。

数字で始まる変数名は使えません。
例えば，次のコマンドを実行するとエラーが返ってきます。
```{r}
#| eval: false
2 <- 3
2x <- 10 + 2 * b
```
アルファベットで始まる変数名にしてください。
大文字より小文字が望ましく，意味のある名前だと分かりやすいです。
変数名にはアルファベットと数字以外に `_` と `.`を使うことがよくあります。
`_` は英単語の区切りとして使うと便利です（例：`newnames` よりも `new_names` の方が分かりやすい）。
`.` は特別な理由がない限り使わない方がよいでしょう（例：`new.names` といった変数名は使うことはできるが，避ける方が無難）。

作成した変数を削除する場合は，次のコマンドを実行します。
```{r}
#| eval: false
rm(x)
```

現在使っている変数名は次のコマンドを実行すると分かります。
```{r}
#| eval: false
ls()
```
いろいろな変数を作りすぎて混乱してしまうことがあるでしょう。
その場合，いったんRを終了して，再びRを起動すると，これまでRコンソールで作成した変数はすべてなくなります。
いったんRを終了したのとほぼ同じことは，次のコマンドでも実行できます。
```{r}
#| eval: false
rm(list = ls())
```
このコマンドは，変数だけでなく，後述する関数を含む（ほぼ）すべてのオブジェクトが削除されます。

#### Tips

`.` で始まる変数名は通常は作成しませんが，作成することはできます。
この変数は他の変数と若干異なります。
例えば，次のようにしてみるとわかります。
```{r}
#| eval: false
.a <- 10
.a
ls()
```
`.a` という名前の変数が存在するはずですが，一覧には表示されません。
`.a` も含めて一覧を表示させるためには，次のようにします。
```{r}
#| eval: false
ls(all.names = TRUE)
```
こういう特殊な動きをするため，`.` で始まる変数名は特別な理由がない限り使わないでください。

### 関数

先ほどのように文字の直後に `()` がくるオブジェクトを**関数**と呼びます。
関数には以下の特徴があります。

- 関数名と `(` と `)` の3つでひとかたまりである。
- 関数はより複雑な処理（より長いコード）を簡略化したものである。
- 関数に続く `()` の中には，関数のオプションとなる引数（ひきすう）を書く。
- `()`を付けずに，関数名だけを書くと，その関数の中身を見ることができる。
- `?`に続けて関数名だけを書くと，その関数のヘルプを参照することができる。

例を挙げましょう。
`seq()` は数列を生成する関数です。
```{r}
x <- seq(from = 1, to = 10, by = 1)
```
このとき，`from = 1, to = 10, by = 1` の部分が引数です。
この関数は，`from` から `by` ずつ `to` まで値を増やす数列を生成します。
実際に `x` の中身を確認してみましょう。
```{r}
x
```

関数の引数の名前は省略できます。
例えば，上の記述は以下のように書いても同じです。
```{r}
x <- seq(1, 10, 1)
```
引数の値だけを書いた場合，どの引数の値であるかはコンマで区切られた順番によって決まります。
こうした引数の順番をどのようにして知ることができるでしょうか。
この答えは，後述する関数のヘルプを参照するというものです。
関数のヘルプを見ると引数の順番が分かります（ただし，冗長すぎるといった理由がない限り，引数名は省略しないことをおすすめします）。
また，どのような引数が使えるかも分かります。

ここで，上述した `by = 1` のときの `seq()` は以下のように単純化することができることは知っておく必要があります。
```{r}
x <- 1:10
```
この表記はよく使うので必ず覚えておきましょう。

`seq()` の引数の値を変更すると，違う結果が得られることが想像できるはずです。
次のようにすると，`x` の中身がどうなるか想像し，実際に想像通りになるかを確かめてください。
```{r}
x <- seq(from = 1, to = 100, by = 2)
x2 <- seq(from = 1, to = 100, by = 5)
```

一般的に，関数名は覚えなければなりません。
ある関数の使い方については，ヘルプを参照すると分かります。
ヘルプを参照するためには，次のように関数名の前に `?` を書きます。
```{r}
#| eval: false
?seq
```
同じ結果は，次のようにしても得られます。
```{r}
#| eval: false
help(seq)
```
これは `help` という関数を使って，関数のヘルプを参照しています。

ここで作成した変数 `x` はベクトルです。
`x` の中には10個の値が入っており，順番にも意味があります。
このベクトルの2番目の要素は次のようにして取り出すことができます。
```{r}
x[2]
```

長さは次のようにして得ることができます。
```{r}
length(x)
```

このベクトルはいろいろな計算ができます。
合計を計算するには `sum()` を使います。
```{r}
sum(x)
```
これはExcelの関数として使ったことがあるのではないでしょうか。

平均は次のようにして計算します。
```{r}
mean(x)
```

こうした関数を数式に含めることもできます。
```{r}
x - mean(x)
```

上では変数名は何でもよいとしましたが，すでに定義されている関数とは別の名前にしなければなりません。
例えば，次のように変数 `mean` を作成できますが，絶対にしないでください。
```{r}
#| eval: false
mean <- sum(x) / length(x)
```
すでにある関数名などのことを予約語と言います。
作成したい変数名が予約語かどうかは，その変数名だけを実行したときにエラーとして返ってくるかどうかで判断できます。
```{r}
#| error: true
mean_x
```
このようなエラーが返ってくれば，その文字列は変数名として使えます。
例えば，`a` と `b` という変数の次に，`c` という名前の変数を作りたくなったり，分かりやすく `data` という名前の変数を作りたくなるかもしれません。
実際に，作ってみるとエラーが出ずに作れてしまいます。
作れるので，作ってもいいのですが，後々に思わぬエラーに悩まされるかもしれません。
予約語ではない変数名にするように心掛けましょう。


### パッケージ

Rをインストールした素の状態で使える関数は限られています。
Rユーザーが有益な関数を作成し，他のユーザーと共有しているものがあります。
これらの関数は，パッケージとしてCRANに公開されており，それを自分のパソコンにインストールできます。

例えば，Microsoft Excelで作成されたファイルを効率的に読むことができる `readxl` パッケージを使う場合を考えます。
このパッケージを初めて使う場合のみ，自分のパソコンにパッケージをインストールする必要があります（Rのバージョンが変わったときにもパッケージをインストールする必要があります）。
以下のコマンドを実行すれば，目的のパッケージがインストールされます。
```{r}
#| eval: false
install.packages("readxl")
```
このコマンドは一度実行すれば，Rを終了しても，また，パソコンの電源を切ったとしても，再度実行する必要はありません。
実行してもエラーにはならないので，不安なら実行して構いませんが，一度インストールしたパッケージはパソコンの中に残ります。

インストールしたパッケージをRで使えるようにするためには，次のコマンドを使って，Rにロードする必要があります。
```{r}
#| eval: false
library(readxl)
```
このとき，以下のようにしても構いません。
```{r}
#| eval: false
library("readxl")
```
つまり，`install.packages()` のときは，`""` で括らなければなりませんが，`library()` の場合はどちらでも構いません。
ちなみに，何もしなくても最初からロードされているパッケージがいくつかあります。
その場合，そのパッケージをロードしなくても，そのパッケージに含まれる関数を使うことができます。

インストールしたパッケージの関数を使う場合，いま仮に `"sample.xlsx"` という名前のExcelファイルがあるとすると，以下のコマンドを実行します。
```{r}
#| eval: false
read_excel("sample.xlsx")
```
このコマンドは，次のように書くこともできます。
```{r}
#| eval: false
readxl::read_excel("sample.xlsx")
```

CRANに登録されていないパッケージもインストールできる場合があります。
例えば，日本語形態素解析器MeCabのRラッパーである `RMeCab` パッケージをインストールする方法はここに書かれています。

- [RMeCab](http://rmecab.jp/wiki/index.php?RMeCab){target="_blank"}
- [RMeCab: Interface to MeCab](https://github.com/IshidaMotohiro/RMeCab){target="_blank"}

パッケージにはバージョンがあり，常に最新のバージョンを使うべきです。
インストールされているパッケージは自動でアップデートされないので，定期的に次のコマンドを実行するように心掛けましょう。
```{r}
#| eval: false
update.packages(ask = FALSE)
```

インストールされているパッケージの一覧は次のコマンドで得られます。
```{r}
#| eval: false
.packages(all.available = TRUE)
```
ただし，これは知らなくてもよいです。
また，パッケージがどこにインストールされているかを知りたい場合は，次のコマンドを実行します。
```{r}
#| eval: false
searchpaths()
```
これも知らなくてよいです。
CRANに公開されているパッケージをすべてインストールしたい場合は，以下のコマンドを実行します。
```{r}
#| eval: false
installed <- row.names(installed.packages())
available <- row.names(available.packages())
uninstalled <- available[!available %in% installed]
install.packages(uninstalled)
```
今から数ヶ月間インターネット環境のない場所に行くといった特別な理由がない限り，このような操作は必要ありません。
なお，これも使う機会はないと思いますが，パッケージをアンインストールしたい場合は，以下のコマンドを実行します。
```{r}
#| eval: false
remove.packages("パッケージ名")
```

#### 名前空間

名前空間について，通常は知らなくてよいです。
ただし，ひとつの作法を知っておいた方がよいので，ここで触れておきます。
ここでは，**そうするもの**として理解してください。

読み込んだパッケージに含まれる関数を使う場合，その関数名だけで問題なく動作します。
しかし，そこをあえて関数名の前にパッケージ名と `::` を付けることがあります。
例えば，次のようにします。
```{r}
#| eval: false
utils::read.csv("sample.csv")
```
これは名前空間を明示する書き方であり，こうしなくてもよいですが，こうしておくと人間が読むときに読みやすくなり，間違いが少なくなります。
また，自分が書いたコードを見返すときに分かりやすくなります。
さらに，関数名の衝突が起こるなど，トラブルが発生したときに解決の糸口になることがあります。

Rに最初からインストールされているパッケージについては，名前空間を明示しなくても構いません。
以下の例の場合，上の記述が一般的です。
```{r}
#| eval: false
mean(x)
base::mean(x)
```


## 練習問題

1. 次のWebサイトから任意のCSVファイルをダウンロードして，変数 `test` に読み込みなさい。また，正しく読み込めているかを確かめなさい。
  - [CSV Files](https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html){target="_blank"}
  - ヒント：CSVファイルを読み込む関数は，`read.csv` です。
